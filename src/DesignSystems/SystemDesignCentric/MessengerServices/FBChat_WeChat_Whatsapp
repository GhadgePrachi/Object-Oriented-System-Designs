    Goal : Provides text based instant msgs to other users vis web or mobile interfaces

    System Requirements :
            Functional :
                Allow users to have one-to-one conversations with other users
                Keep track of user status - Online, Offline/Away, Busy etc
                Keep track of msg status - Send, Delivered, Read

            Non-Functional :
                Scalable and flexible
                Available
                Consistency is okay to take a hit, it's okay for user not to see the msgs for a while but chat must be consistent on all the devices
                Reliable, user's chat should not be lost
                Calculate estimates,
                    500 Million users of which 1 Million users are active everyday
                       Each send 20 msgs each 100 bytes everyday => 1 Million * 20 * 100 = 2 Billion storage every day.
                       Each send 20 msgs everyday => 1 Million * 20 *100 / 24*60*60 query per sec
            Extended :
                Group Chat, Push notifications

    API's :

    Diagram :

              - - - -                          - - - - - - - -                    - - - - - - -
             |       |                        |  Server01     |  1⮠ MSG          |  Bob        |
             | Alice |                        |               |  1⮡ ACK          | (Send)      |
             |       |                        |               |                  |             |
             |       |   2⮠ Delivers MSG(ID)  |   Server02    |  2⮡ Delivered(ID)| (Delivered) |
             |       |                        |               |                  |             |
             |       |    3⮡ Read(ID)         |   Server03    |  3⮡ Read(ID)     |  (Read)     |
             |_ _ _ _|                        |_ _ _ _ _ _ _ _|                  |_ _ _ _ _ _ _|

                                                    ⇵
                                                 _ _ _ _ _ _
                                                |           |
                                                |    DB     |
                                                |_ _ _ _ _ _|

    Algorithm :
            On receiving msg to be sent to other user by the sever , it saves to the db and does the following
            Msg handling & Msg status & User status
                Pull model :
                    Periodically ask for new msgs
                    For min latency need to request frequently, this will cause sending of empty responses often
                Push model :
                    Keep connection open, store user_id as key and value as connection_object in hashtable
                    What if user goes offline, send delivery failure msg and ask user to resend if it's temporary failure & use long polling to re-establish the connection else, or store offline user and msgs @queue to the server and try resending when the user reconnects, once delivered msg is flushed out and is ephemeral (queue is freed up when its empty)
                    When user is back online, broadcast the online status to everyone with delay of few second till user sends new msg to other user to make sure user does not go offline immediately.
                    How to maintain the order of msgs? add timestamp sequencing to each msgs, each user will have same view of msgs on all devices but different users can have different view of chat
                        E.g User1 sends M1 to User2 when User2 is offline then User2 sends M2 to User1 and then receives M1, so for User1 its M1,M2 & for User2 its M2,M1

    DB :
        How many users? 500 Millions
        How much storage? 1 Billion
        DB Schema :
            User Table (user_id, name, location, dob)
            UserChat Table(user1_id, user2_id, chat_id)
        How to store?
            File or DB?
                File easy to maintain, too slow to fetch queries
            SQL or No-SQL DB?
                SQL , Too slow for frequent updates for small bytes msgs and frequent fetch request as well
                No-SQL preferred, HBase i.e column based solution for quicker access and also since there is no relationship between the chats, also paginate for fetching data from the server


    Performance : Refer System Design Concepts
                Caching layer and replication : How to make read access even faster? Use Cache system instead of db for Timeline/Feed, live data.
                Load Balancer
                Data redundancy and replication for single point of failure
                Data partition/sharding based on user_id, message_id
                Data pruning/ clean up
                Data security

    Online Video Link : https://www.youtube.com/watch?v=5m0L0k8ZtEs