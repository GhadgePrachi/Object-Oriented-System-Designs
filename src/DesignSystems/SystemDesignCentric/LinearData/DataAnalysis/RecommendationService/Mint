Mint : Financial Manager

    I]Data Storage :
       1)Data Models :
          User Table (user_id, first_name, last_name, dob)
          Accounts Table (account_id, user_id, account_type)
          Transaction Table : (transaction_id,transaction_details, user_id)E.g SpendingHabits , Finite data which is later fetched for analysis purposes (NOSQL Solutions for scaling data)
       2)i)Which db for real-time data?
           Persistent layer : SQL for data models, for scalability uses NOSQL Solutions later on
          ii)Where is the real-time data stored?
              Data centers : Close/primary data center or Backup data center(server machines).
                             If both are offline, we have loose data.
       3)i)Which data store for archived data? Hadoop
        ii)Where archived data is stored ? Data warehouses, used for data analysis (spending habits by the user and recommended budget to the user)
       4)Real-time data has to be decoupled from data warehouse data.

    II]Data Services:
       Services across different geographical regions.
       Business Logic : Core Features:
            Account API:
                Add or remove accounts Service
                Transaction updates Service
                Transaction Extraction(Categorizing) and Recommendation(Budget Suggestions) Service :
                    a)Uses Task Queue :
                    1)To have asynchronous activities
                    2)We want to build a task queue system that can prioritize some task types over others, while still ensuring that all tasks will be performed eventually.
                    That is, we wouldn't want a low priority task to essentially "starve" because there are always higher priority tasks.
                    b)Categorization : Based on Housing, Gas, Food etc : Can use log Files(Map-Reduce Jobs (twice a day), Pig Scripts, Hive) instead of SQL DB(SQL Queries) for frequent and tons of updates
                    c)Budgeting : Based on monthy_spendng etc. Should not exceed a specific budget may be depending on the earnings!
                    d)Send Notification : Via Email (Have an email system)
                    or Can use Kafka Services

    III]Networking :
            Routes requests and distributes them  efficiently : Load balancer
            Stateless Services : Customers does not have to any knowledge about the end point /state of the communication with the service(http)

    IV}Testing :
        Failure :
          Any section of the system : How can we handle this? Replicate/third party services
          Data centers : Manually rebooting incase of failure

    SQL Queries :
    1)Get all transactions for user id
    SELECT * from transaction where user_id = 1;
    2)Get no of transactions for user id
    SELECT count(*) from transaction where user_id = 1;

    Online Link : https://github.com/donnemartin/system-design-primer/tree/master/solutions/system_design/mint

