    Goal : Automated clean ups

    System Requirements :
        Pros :
            Makes programming much easier
            Prevents accessing dangling pointers that point to an object that no longer exists.
            Avoids memory leak, which means an unreachable region of memory that can never be freed.

        Cons :
            Consumes computing resources

    Algorithms :
        Search for variables that are no longer referenced.
            I]Graph problem – find unreachable nodes in a graph.
             a)Mark-and-Sweep
             In the first phase, do a tree traversal following object references and mark all the visited objects.
             In the second phase, track all the unreachable objects, free their memory.
                How? Keep a set of all the objects in the program. Whenever a new object is initialized, add it to the pool.
             Issues : The program will be frozen when doing garbage collection and no mutation of the working set can be allowed.
             b)Tri-color marking : The system can do garbage collection on the fly, which is accomplished by marking objects as they are allocated and during mutation.
               White – objects that have no reference and should be recycled.
               Black – reachable objects that should not be recycled. Black objects have no reference to white objects.
               Gray – objects that are reachable from roots and yet to be scanned for references to white.
            II]Reference Counting : Avoids system freeze
               Issues : Memory overhead

    Performance :

Online Links :
http://blog.gainlo.co/index.php/2016/08/08/design-garbage-collection-system-part-i/
http://blog.gainlo.co/index.php/2016/08/08/design-garbage-collection-system-part-ii/