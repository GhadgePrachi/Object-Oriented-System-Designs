Basic workflow :
    1)How many classes/concepts we need?
    2)Define each class
        i)Types: What does the class represent?
            a)i)Collection of generic objects [Example - tree/trie/linked list]
              ii)Collection of primitive objects [Example - int[] array, ArrayList<Integer>]
            b)Single Generic object [Example - tree node/ trie node /linked list node]

        ii)Define member variables for this class -
            Member Variable Categorization:
            a)i)List of generic objects [Example - ArrayList<GraphNode>]  or HashMap of <key,object> for faster access of objects
              ii)List of primitive type [Example -  ArrayList<Integer>]
            b)i)Just a single generic object[Example - Class Game has board object
              ii)Just a single primitive data [Example - int id]
            c) Any boolean check needed [Example - boolean isShared, boolean isVisited]

            Member Variable Signature:
            a)Define access modifier : private(with public getter & setter) or public(not recommended) do not specify that is default
            b)Define data type : primitive (int,ArrayList<Integer>) or generic TreeNode root in Tree class
            c)Define member variable name : Use camelCasing or Use separation_using_underscore or Use ALL_CAPS_USING_UNDERSCORE for final/constants

        iii)Define Constructor for this class -
                    Initialize all member variables here

        iV)Define methods/operations for this class : Generally deals with modify [i.e insert or delete or replace or compress or encode/decode] or search or connect to other classes
            Method signature:
            a)Define access modifier : private(in case it is in inner classes or helper function)/public/protected(sub-classing)
            b)Define if static or not : static if we want main to access it directly using ClassName.otherStaticMethod without creating an object as in non-static ones. Also, methods that involves not manipulating self/self attributes/data like getChar(),buildTreeFromList() can be static whereas methods like insert(),size(),height() better to let them stay non-static
            c)Define return type of method : void,single generic/primitive data,collection of generic/primitive data
              Discuss with the interviewer properly before diving into the proper code
            d)Define method name : Use camelCasing or Use separation_using_underscore
            e)Define parameter list:
              Be clear how input is provided:
              Discuss this the interviewer before diving into the proper code
                i)Be clear how input is provided:
                  [Example - is dictionary provided in form of list or HashMap?
                             is it in memory or only some fits in memory at given time?spread across servers?]
                ii)Listen carefully about every piece of question that is stated
                    [Example - what kind of graph? connected/disjoint set , hasCycles? Yes(Graph)NO(Tree-has one root), weighted or unweighted, directed or undirected?
                               what kind of tree? binary tree/binary search tree/skew tree
                               what kind of linked list? singly/doubly/circular
                               what kind of queue? priority queue(data needs to be sorted at all times/circular queue
                               what is range of data set(number)? positives(1,2,3...[not including 0]),negatives(-1,-2,-3,..[not including 0]),non-negatives(0,1,2,3), negatives as well as positives , value is within the range of the indices where value is placed
                               what is range of data set(character)? has ASCII(128/256) or UNICODE(Millions) values, only Alphabets(26)
                               is it sorted? start with brute force but have BST or binary search in you mind for optimization and mention about it to the interviewer
                               does it have duplicates?how to handle corner case involving duplicates]

             Method Body: "IBS-Code"
             a)Check for invalid states/inputs [Example - search index out of bound(i<0 || i>=size) , if visited]
             b)Check for base/terminating condition/state/inputs [Example - a)if root==null, b)size==0 or size==1(for bottom-up approach), c)size==n(for top-down approach)]
             b)Check for short -circuiting cases/inputs - optimization
             c)Generic code [Example size>=2]

     3)Try to make the code as generic as possible : Start simple if you want but then atleast mention that you want to make it generic may be in a TODO comment

Class design OOPS concept :
1)Abstraction,Encapsulation,Inheritance,Polymorphism
2)HAS-A relationship : Aggregation(Object exist on it's own, eg Game has a list of players) , Composition(Object can not exist on it's own, eg Game has a GameBoard object)
3)IS-A relationship : Super/Subclass (eg Manager is an employee, Respondent is an employee, Director is an employee)

https://en.wikipedia.org/wiki/Object-oriented_design