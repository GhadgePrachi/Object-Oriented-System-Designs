1.1 What and Why are we talking about? Centric towards an Idea / Goal
1.2 How to do it correctly? Centric towards Functional Requirements
1.3 How to do it effectively & efficiently? Centric towards Non-Functional Requirements
1.3.a PHASE 1 : 1:1 Entity Transactions - Self served, no infrastructure needed per se
1.3.b PHASE 2 : 1:N Entities Transactions - Middleman with physical infrastructure
1.3.c PHASE 3 : 1:N Entities Transactions - Middleman with technical infrastructure 
Read[Algorithms like Greed-index-computations e.g binary search etc, Pre-computations e.g dynamic programing etc], 
Write[Data structures like hash map, hash set, stack, queue, heap, graphs etc], 
Scale[Infrastructure like non-monolithic architecture]

Breakdown of Non-Monolithic Architecture 
Client(s) [Caching]
Server(s) [Restful Web Services vs Micro Services, Synchronous vs Asynchronous]
Data(base(s)) [Reader/Writer, SQL vs NOSQL]
Network [Security]
Miscellaneous [SDLC (Agile methodology) : Resources/Requirement gathering, Development milestones-setting priorities and timelines and updating them based on progress, Testing environments, Logs monitoring, Dashboards monitoring]

Online References:
https://en.wikipedia.org/wiki/Systems_design
http://blog.gainlo.co/index.php/2017/03/24/chapter-5-system-design-interviews-part-complete-guide-google-interview-preparation/
https://www.youtube.com/watch?v=0163cssUxLA
https://www.youtube.com/watch?v=DggPVpQmrsg
https://www.youtube.com/watch?v=GcE-a7zO2N0
